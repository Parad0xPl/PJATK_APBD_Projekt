@page "/watchlist"
<h3>Watchlist</h3>
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using FrontEnd.Utils
@inject ApiClient HttpClient

<PageTitle>Watchlist</PageTitle>

<ErrorMessage Message="@ErrorMessage"></ErrorMessage>

<SfGrid DataSource="@DetailsList" AllowPaging="true">
    <GridPageSettings PageCount="5" PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field="Logo"></GridColumn>
        <GridColumn Field="Symbol"></GridColumn>
        <GridColumn Field="Name"></GridColumn>
        <GridColumn Field="Type"></GridColumn>
        <GridColumn Field="Marker"></GridColumn>
        <GridColumn Field="Options"></GridColumn>
    </GridColumns>
    <GridTemplates>
        <RowTemplate>
            @{
                var watchlistElement = (context as WatchlistData);
            }
            @if(watchlistElement != null){
                <td>
                    @if (watchlistElement.ImageUrl != "")
                    {
                        <img class="stock-logo" src="@watchlistElement.ImageUrl" alt="@watchlistElement.Symbol Logo"/>
                    }
                </td>
                <td>
                    @watchlistElement.Symbol
                </td>
                <td>
                    @watchlistElement.Name
                </td>
                <td>
                    @watchlistElement.Type
                </td>
                <td>
                    @watchlistElement.Marker
                </td>
                <td>
                    <SfButton @onclick="() => RemoveWatchlist(watchlistElement.Symbol)">Remove</SfButton>
                </td>
            }
        </RowTemplate>
    </GridTemplates>
</SfGrid>

<style>
    .stock-logo {
        max-width: 100%;
        max-height: 100%;
        padding: 5px;
    }
    
    tr.e-row.e-altrow {
        background-color: var(--bs-gray-100);
    }
    tr.e-row:not(.e-altrow) {
        background-color: var(--bs-white);
    }
</style>

@code {
    private List<WatchlistData> DetailsList { get; set; } = null!;
 
    protected override async Task OnInitializedAsync()
    {
        var watchlist = await HttpClient.GetWatchlist();
        if (watchlist == null)
        {
            ErrorMessage = "Can't fetch your watchlist. Try to login again or contact administrator";
            return;
        }
        DetailsList = watchlist;
    }

    private async Task RemoveWatchlist(string watchlistElementName)
    {
        var removeFromWatchlist = await HttpClient.RemoveFromWatchlist(watchlistElementName);
        if (removeFromWatchlist)
        {
            DetailsList = DetailsList.Where(e => e.Symbol != watchlistElementName).ToList();
        }
    }

    public string? ErrorMessage { get; set; }

}