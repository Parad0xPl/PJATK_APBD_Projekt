@page "/dashboard"
@inject ApiClient _httpClient
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using FrontEnd.Utils
@inject ApiClient _HttpClient

<h3>Dashboard</h3>
<div class="row">
    <div class="col-9">
        <SfAutoComplete TValue="string" TItem="SearchData" Placeholder="Type symbol" DataSource="@SearchItems" @bind-Value="@CurrentTicker">
            <AutoCompleteFieldSettings Value="Ticker"/>
            <AutoCompleteTemplates TItem="SearchData">
                <ItemTemplate>
                    <div>
                        <span class="ticker">@((context as SearchData).Ticker)</span>
                        <span class="name">@((context as SearchData).Name)</span>
                        <span class="exchange">@((context as SearchData).PrimaryExchange)</span>
                    </div>
                </ItemTemplate>
            </AutoCompleteTemplates>
        </SfAutoComplete>
    </div>
    <div class="col-3">
        <NavLink href="watchlist">
            <SfButton>Watchlist</SfButton>
        </NavLink>
    </div>
</div>
@if(CurrentTicker.Length > 2){
    <StockInfo Symbol="@CurrentTicker"></StockInfo>
}

<style>
    
</style>

@code {

    private string _CurrentTicker = "";
    private string CurrentTicker
    {
        get => _CurrentTicker;
        set
        {
            if (value.Length > 2)
            {
                StateHasChanged();
            }
            _CurrentTicker = value;
        }
    }

    public async Task<IEnumerable<SearchData>> GetSearch(string value)
    {
        var search = await _httpClient.GetSearch(value);
        return search ?? new SearchData[]{};
    }

    protected override async Task OnInitializedAsync()
    {
        SearchItems = await GetSearch("TL");
        await base.OnInitializedAsync();
    }

    public IEnumerable<SearchData> SearchItems { get; set; }

    
}