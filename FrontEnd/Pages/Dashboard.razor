@page "/"
@inject ApiClient HttpClient
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using FrontEnd.Utils

<PageTitle>Dashboard</PageTitle>

<h3>Dashboard</h3>
<div class="row">
    <div class="col-9">
        <SfAutoComplete TValue="string" TItem="SearchData" Placeholder="Type symbol" @bind-Value="@_currentTicker">
            <SfDataManager  AdaptorInstance="@typeof(AutocompleteAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <AutoCompleteFieldSettings Value="Ticker"/>
            <AutoCompleteTemplates TItem="SearchData">
                <ItemTemplate>
                    <div>
                        <span class="ticker">@context.Ticker</span>
                        <span class="name">@context.Name</span>
                        <span class="exchange">@context.PrimaryExchange</span>
                    </div>
                </ItemTemplate>
            </AutoCompleteTemplates>
        </SfAutoComplete>
    </div>
    <div class="col-3">
        <NavLink href="watchlist">
            <SfButton>Watchlist</SfButton>
        </NavLink>
    </div>
</div>
@if(_currentTicker != null && _currentTicker.Length > 1){
    <StockInfo Symbol="@_currentTicker"></StockInfo>
}

<style>
    
</style>

@code {
    private static ApiClient? _apiClient;
    private string? _currentTicker;

    protected override async Task OnInitializedAsync()
    {
        _apiClient = HttpClient;
        await base.OnInitializedAsync();
    }

    class AutocompleteAdaptor : DataAdaptor
    {
        public override async Task<object> ReadAsync(DataManagerRequest dataManagerRequest, string? key = null)
        {
            var client = _apiClient ?? throw new InvalidOperationException();
            string? filter = null;
            if (dataManagerRequest.Where != null)
            {
                foreach (var v in dataManagerRequest.Where)
                {
                    if (v.Operator == "contains")
                    {
                        filter = v.value as string;
                    }
                }
            }
            if (filter != null && filter.Length >= 2)
            {
                var searchDatas = await client.GetSearch(filter);
                return searchDatas ?? new List<SearchData>();
            }
            return new List<SearchData>();
        }
    }
    
}