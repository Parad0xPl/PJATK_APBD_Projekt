@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using global::Shared.DTO
@using FrontEnd.Utils


@if (details != null)
{
    <img src="@details.Results.Branding.LogoUrl"/>
    <h4>@details.Results.Name</h4>
    <SfButton @onclick="AddToWatchlist">Add to watchlist</SfButton>
    <p>
        <span>Country: @details.Results.Locale</span>
        <span>Industry: @details.Results.SicDescription</span><br/>
        <span>Currency: @details.Results.CurrencyName</span>
        <span>Description: @details.Results.Description</span>
    </p>

    <SfButton @onclick="() => { UpdateGraph(PossibleGraphs.Today); }">Current Day</SfButton>
    <SfButton @onclick="() => { UpdateGraph(PossibleGraphs.Week); }">1 week ago</SfButton>
    <SfButton @onclick="() => { UpdateGraph(PossibleGraphs.Month); }">1 month ago</SfButton>
    <SfButton @onclick="() => { UpdateGraph(PossibleGraphs.Quarter); }">3 month ago</SfButton>

    <SfStockChart Title="@Symbol" Theme="@theme">
        @* <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents> *@
        @* <StockChartPrimaryXAxis> *@
        @*     <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines> *@
        @*     <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip> *@
        @* </StockChartPrimaryXAxis> *@
        @* <StockChartPrimaryYAxis> *@
        @*     <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle> *@
        @*     <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines> *@
        @* </StockChartPrimaryYAxis> *@
        @* <StockChartTooltipSettings Enable="true"></StockChartTooltipSettings> *@
        @* <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings> *@
        <StockChartSeriesCollection>
            <StockChartSeries DataSource="@StockGraphData" Type="ChartSeriesType.Candle"
                              XName="x" High="high" Low="low" 
                              Open="open" Close="close" Volume="volume"></StockChartSeries>
        </StockChartSeriesCollection>
        @* <StockChartChartArea> *@
        @*     <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder> *@
        @* </StockChartChartArea> *@

    </SfStockChart>
}



@inject ApiClient _HttpClient
@code {
    private TickerDetailsDTO? details { get; set; }
    
    private List<GraphData> StockGraphData { get; set; }
    
    [Parameter]
    public string Symbol { get; set; }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine("Parameters change");
        Fetch(Symbol);
        return base.OnParametersSetAsync();
    }

    public async Task AddToWatchlist()
    {
        if (details == null)
        {
            return;
        }
        var isSuccess = await _HttpClient.AddToWatchlist(details.Results.Ticker);
        if (!isSuccess)
        {
            //Error
            return;
        }
        //Success
        return;
    }
    
    Theme theme = Theme.Bootstrap5;
    public async Task Fetch(string symbol)
    {
        var response = await _HttpClient.GetDetails(symbol);
        if (response == null)
        {
            return;
        }
        var graphDatas = await _HttpClient.GetGraph(symbol, PossibleGraphs.Today);
        if (graphDatas == null)
        {
            return;
        }
        StockGraphData = graphDatas;
        details = response;
        StateHasChanged();
    }

    public async Task UpdateGraph(PossibleGraphs symbol)
    {
        var graphDatas = await _HttpClient.GetGraph(Symbol, symbol);
        if (graphDatas == null)
        {
            return;
        }
        StockGraphData = graphDatas;
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await Fetch(Symbol);
        await base.OnInitializedAsync();
    }

    private void ChartLoaded(StockChartEventArgs obj)
    {
        StateHasChanged();
    }

}