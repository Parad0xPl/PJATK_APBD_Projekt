@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using global::Shared.DTO
@using FrontEnd.Utils

<div class="stock-info row">
    
@if (Details != null)
{
    <div class="row">
        <div class="col-2">
            @if (Details.Results != null && 
                 Details.Results.Branding != null && 
                 Details.Results.Branding.LogoUrl != null)
            {
                <img style="max-height: 100%;max-width: 100%;" src="@Details.Results.Branding.LogoUrl" alt="@Details.Results.Ticker Logo"/>
            }
        </div>
        <div class="col-7">
            <h4>@Details.Results?.Name</h4>
        </div>
        <div class="col-3">
            <SfButton @onclick="AddToWatchlist">Add to watchlist</SfButton>
        </div>
    </div>
    <div class="row stock-description">
        @if(Details.Results?.Locale != null){
            <div class="col-12">
                <span class="stock-description-info">Country:</span> @Details.Results.Locale.ToUpper()
            </div>
        }
        @if(Details.Results?.SicDescription != null){
            <div class="col-12">
                <span class="stock-description-info">Industry:</span> @Details.Results.SicDescription.ToLower()
            </div>
        }
        @if(Details.Results?.CurrencyName != null){
            <div class="col-12">
                <span class="stock-description-info">Currency:</span> @Details.Results.CurrencyName.ToUpper()
        </div>
        }
        @if (Details.Results?.Description != null)
        {
            <div class="col-12">
                <span class="stock-description-info">Description:</span> @Details.Results.Description
            </div>
        }
    </div>

    <div>
        <SfButton @onclick="async () => { await UpdateGraph(PossibleGraphs.Today); }">Current Day</SfButton>
        <SfButton @onclick="async () => { await UpdateGraph(PossibleGraphs.Week); }">1 week ago</SfButton>
        <SfButton @onclick="async () => { await UpdateGraph(PossibleGraphs.Month); }">1 month ago</SfButton>
        <SfButton @onclick="async () => { await UpdateGraph(PossibleGraphs.Quarter); }">3 month ago</SfButton>
    </div>

    <div class="row">
        <SfStockChart @ref="@Chart" Title="@Symbol" Theme="@Theme.Bootstrap5" EnableSelector="false">
            <StockChartTooltipSettings Enable="false"></StockChartTooltipSettings>
            <StockChartCrosshairSettings Enable="false"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@StockGraphData" Type="ChartSeriesType.Candle"
                                  XName="X" High="High" Low="Low" 
                                  Open="Open" Close="Close" Volume="Volume"></StockChartSeries>
            </StockChartSeriesCollection>
        </SfStockChart>
    </div>
}

</div>

<style>
    .stock-info {
        padding-top: 20px;
    }
    
    .stock-info > * {
        margin-top: 20px;
    }
    
    .stock-description .stock-description-info {
        font-weight: bold;
    }
    
    .stock-description-info > * {
        margin-bottom: 10px;
    }
</style>

@inject ApiClient HttpClient
@code {
    private TickerDetailsDTO? Details { get; set; }
    private List<GraphData> StockGraphData { get; set; } = new List<GraphData>();
    private SfStockChart? Chart { get; set; }
    
    [Parameter]
    public string? Symbol { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await Fetch(Symbol);
    }

    private async Task AddToWatchlist()
    {
        if (Details?.Results == null)
        {
            return;
        }
        var isSuccess = await HttpClient.AddToWatchlist(Details.Results.Ticker ?? throw new InvalidOperationException());
        if (!isSuccess)
        {
            //Error
            //TODO 
            return;
        }
        //Success
    }
    
    private async Task Fetch(string? symbol)
    {
        var response = await HttpClient.GetDetails(symbol);
        if (response == null)
        {
            return;
        }
        Details = response;
        StateHasChanged();
        var graphData = await HttpClient.GetGraph(symbol, PossibleGraphs.Today);
        if (graphData == null)
        {
            return;
        }
        StockGraphData = graphData;
        Chart?.Refresh();
    }

    private async Task UpdateGraph(PossibleGraphs symbol)
    {
        var graphData = await HttpClient.GetGraph(Symbol, symbol);
        if (graphData == null)
        {
            return;
        }
        StockGraphData = graphData;
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await Fetch(Symbol);
    }
}