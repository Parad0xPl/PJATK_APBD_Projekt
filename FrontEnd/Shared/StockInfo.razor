@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using global::Shared.DTO
@using FrontEnd.Utils

<div class="stock-info row">
    
@if (details != null)
{
    <div class="row">
        <div class="col-2">
            <img style="max-height: 100%;max-width: 100%;" src="@details.Results.Branding.LogoUrl"/>
        </div>
        <div class="col-7">
            <h4>@details.Results.Name</h4>
        </div>
        <div class="col-3">
            <SfButton @onclick="AddToWatchlist">Add to watchlist</SfButton>
        </div>
    </div>
    <div class="row stock-description">
        <div class="col-12">
            <span class="stock-description-info">Country:</span> @details.Results.Locale.ToUpper()
        </div>
        <div class="col-12">
            <span class="stock-description-info">Industry:</span> @details.Results.SicDescription.ToLower()
        </div>
        <div class="col-12">
            <span class="stock-description-info">Currency:</span> @details.Results.CurrencyName.ToUpper()
        </div>
        <div class="col-12">
            <span class="stock-description-info">Description:</span> @details.Results.Description
        </div>
    </div>

    <div>
        <SfButton @onclick="() => { UpdateGraph(PossibleGraphs.Today); }">Current Day</SfButton>
        <SfButton @onclick="() => { UpdateGraph(PossibleGraphs.Week); }">1 week ago</SfButton>
        <SfButton @onclick="() => { UpdateGraph(PossibleGraphs.Month); }">1 month ago</SfButton>
        <SfButton @onclick="() => { UpdateGraph(PossibleGraphs.Quarter); }">3 month ago</SfButton>
    </div>

    <div class="row">
        <SfStockChart @ref="@Chart" Title="@Symbol" Theme="@theme" EnableSelector="false">
            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>
            @* <StockChartPrimaryXAxis> *@
            @*     <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines> *@
            @*     <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip> *@
            @* </StockChartPrimaryXAxis> *@
            @* <StockChartPrimaryYAxis> *@
            @*     <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle> *@
            @*     <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines> *@
            @* </StockChartPrimaryYAxis> *@
            <StockChartTooltipSettings Enable="false"></StockChartTooltipSettings>
            <StockChartCrosshairSettings Enable="false"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@StockGraphData" Type="ChartSeriesType.Candle"
                                  XName="x" High="high" Low="low" 
                                  Open="open" Close="close" Volume="volume"></StockChartSeries>
            </StockChartSeriesCollection>
            @* <StockChartChartArea> *@
            @*     <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder> *@
            @* </StockChartChartArea> *@

        </SfStockChart>
    </div>
}

</div>

<style>
    .stock-info {
        padding-top: 20px;
    }
    
    .stock-info > * {
        margin-top: 20px;
    }
    
    .stock-description .stock-description-info {
        font-weight: bold;
    }
    
    .stock-description-info > * {
        margin-bottom: 10px;
    }
</style>

@inject ApiClient _HttpClient
@code {
    private TickerDetailsDTO? details { get; set; }
    private List<GraphData> StockGraphData { get; set; }
    private SfStockChart Chart { get; set; }
    
    [Parameter]
    public string Symbol { get; set; }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine("Parameters change");
        Fetch(Symbol);
        return base.OnParametersSetAsync();
    }

    public async Task AddToWatchlist()
    {
        if (details == null)
        {
            return;
        }
        var isSuccess = await _HttpClient.AddToWatchlist(details.Results.Ticker);
        if (!isSuccess)
        {
            //Error
            return;
        }
        //Success
        return;
    }
    
    Theme theme = Theme.Bootstrap5;
    public async Task Fetch(string symbol)
    {
        var response = await _HttpClient.GetDetails(symbol);
        if (response == null)
        {
            return;
        }
        details = response;
        StateHasChanged();
        var graphDatas = await _HttpClient.GetGraph(symbol, PossibleGraphs.Today);
        if (graphDatas == null)
        {
            return;
        }
        StockGraphData = graphDatas;
        Chart.Refresh();
    }

    public async Task UpdateGraph(PossibleGraphs symbol)
    {
        var graphDatas = await _HttpClient.GetGraph(Symbol, symbol);
        if (graphDatas == null)
        {
            return;
        }
        StockGraphData = graphDatas;
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await Fetch(Symbol);
        await base.OnInitializedAsync();
    }

    private void ChartLoaded(StockChartEventArgs obj)
    {
    }

}